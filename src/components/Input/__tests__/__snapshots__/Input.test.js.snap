// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input
    onChange={[MockFunction]}
    onReset={[MockFunction]}
    resetButton={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <input
          onChange={[MockFunction]}
        />,
        <ForwardRef(render)
          isResetButton={true}
          onClick={[MockFunction]}
        >
          X
        </ForwardRef(render)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "onChange": [MockFunction],
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "X",
          "isResetButton": true,
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": "X",
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "__emotion_base": [Function],
          "__emotion_forwardProp": undefined,
          "__emotion_real": [Circular],
          "__emotion_styles": Array [
            "
  cursor: pointer;
  background-color: ",
            [Function],
            ";
  color: ",
            [Function],
            ";
  font-family: ",
            [Function],
            ";
  padding: ",
            [Function],
            ";
  font-size: ",
            [Function],
            ";
  font-weight: ",
            [Function],
            ";
  line-height: ",
            [Function],
            ";
  outline: 0;
  border-width: ",
            [Function],
            ";
  border-style: solid;
  border-color: ",
            [Function],
            ";
  border-radius: ",
            [Function],
            ";
  &:hover {
    ",
            [Function],
            ";
  }
  ",
            [Function],
            ";
",
          ],
          "defaultProps": undefined,
          "displayName": "Styled(Button)",
          "render": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            onChange={[MockFunction]}
          />,
          <ForwardRef(render)
            isResetButton={true}
            onClick={[MockFunction]}
          >
            X
          </ForwardRef(render)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "onChange": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "X",
            "isResetButton": true,
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": "X",
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "__emotion_base": [Function],
            "__emotion_forwardProp": undefined,
            "__emotion_real": [Circular],
            "__emotion_styles": Array [
              "
  cursor: pointer;
  background-color: ",
              [Function],
              ";
  color: ",
              [Function],
              ";
  font-family: ",
              [Function],
              ";
  padding: ",
              [Function],
              ";
  font-size: ",
              [Function],
              ";
  font-weight: ",
              [Function],
              ";
  line-height: ",
              [Function],
              ";
  outline: 0;
  border-width: ",
              [Function],
              ";
  border-style: solid;
  border-color: ",
              [Function],
              ";
  border-radius: ",
              [Function],
              ";
  &:hover {
    ",
              [Function],
              ";
  }
  ",
              [Function],
              ";
",
            ],
            "defaultProps": undefined,
            "displayName": "Styled(Button)",
            "render": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
